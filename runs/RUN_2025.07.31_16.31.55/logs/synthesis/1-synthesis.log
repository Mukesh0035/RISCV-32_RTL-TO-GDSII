
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/riscv32/ControlUnit.v
Parsing SystemVerilog input from `/openlane/designs/riscv32/ControlUnit.v' to AST representation.
Generating RTLIL representation for module `\ControlUnit'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openlane/designs/riscv32/riscv32.v
Parsing SystemVerilog input from `/openlane/designs/riscv32/riscv32.v' to AST representation.
Generating RTLIL representation for module `\riscv32'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/riscv32/InstructionMemory.v
Parsing SystemVerilog input from `/openlane/designs/riscv32/InstructionMemory.v' to AST representation.
Generating RTLIL representation for module `\InstructionMemory'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/riscv32/Register.v
Parsing SystemVerilog input from `/openlane/designs/riscv32/Register.v' to AST representation.
Generating RTLIL representation for module `\RegisterFile'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openlane/designs/riscv32/alu.v
Parsing SystemVerilog input from `/openlane/designs/riscv32/alu.v' to AST representation.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /openlane/designs/riscv32/ProgramCounter.v
Parsing SystemVerilog input from `/openlane/designs/riscv32/ProgramCounter.v' to AST representation.
Generating RTLIL representation for module `\ProgramCounter'.
Successfully finished Verilog frontend.

7. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/riscv32/runs/RUN_2025.07.31_16.31.55/tmp/synthesis/hierarchy.dot'.
Dumping module riscv32 to page 1.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \riscv32
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \ControlUnit
Used module:     \InstructionMemory
Used module:     \ProgramCounter

8.2. Analyzing design hierarchy..
Top module:  \riscv32
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \ControlUnit
Used module:     \InstructionMemory
Used module:     \ProgramCounter
Removed 0 unused modules.

9. Executing TRIBUF pass.

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \riscv32
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \ControlUnit
Used module:     \InstructionMemory
Used module:     \ProgramCounter

10.2. Analyzing design hierarchy..
Top module:  \riscv32
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \ControlUnit
Used module:     \InstructionMemory
Used module:     \ProgramCounter
Removed 0 unused modules.

11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/riscv32/ProgramCounter.v:8$35 in module ProgramCounter.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/riscv32/alu.v:8$31 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/riscv32/Register.v:14$18 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/riscv32/ControlUnit.v:15$1 in module ControlUnit.
Removed a total of 0 dead cases.

13. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 16 assignments to connections.

14. Executing PROC_INIT pass (extract init attributes).

15. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\ProgramCounter.$proc$/openlane/designs/riscv32/ProgramCounter.v:8$35'.

16. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

17. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ProgramCounter.$proc$/openlane/designs/riscv32/ProgramCounter.v:8$35'.
     1/1: $0\pc[3:0]
Creating decoders for process `\ALU.$proc$/openlane/designs/riscv32/alu.v:8$31'.
     1/1: $1\result[3:0]
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/riscv32/Register.v:14$18'.
     1/3: $1$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN[3:0]$24
     2/3: $1$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_DATA[3:0]$23
     3/3: $1$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_ADDR[1:0]$22
Creating decoders for process `\InstructionMemory.$proc$/openlane/designs/riscv32/InstructionMemory.v:0$12'.
Creating decoders for process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
     1/3: $1\alu_src_imm[0:0]
     2/3: $1\reg_write[0:0]
     3/3: $1\halt[0:0]

18. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ALU.\result' from process `\ALU.$proc$/openlane/designs/riscv32/alu.v:8$31'.
No latch inferred for signal `\InstructionMemory.$memwr$\memory$/openlane/designs/riscv32/InstructionMemory.v:7$3_EN' from process `\InstructionMemory.$proc$/openlane/designs/riscv32/InstructionMemory.v:0$12'.
No latch inferred for signal `\InstructionMemory.$memwr$\memory$/openlane/designs/riscv32/InstructionMemory.v:8$4_EN' from process `\InstructionMemory.$proc$/openlane/designs/riscv32/InstructionMemory.v:0$12'.
No latch inferred for signal `\InstructionMemory.$memwr$\memory$/openlane/designs/riscv32/InstructionMemory.v:9$5_EN' from process `\InstructionMemory.$proc$/openlane/designs/riscv32/InstructionMemory.v:0$12'.
No latch inferred for signal `\InstructionMemory.$memwr$\memory$/openlane/designs/riscv32/InstructionMemory.v:10$6_EN' from process `\InstructionMemory.$proc$/openlane/designs/riscv32/InstructionMemory.v:0$12'.
No latch inferred for signal `\ControlUnit.\opcode' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
No latch inferred for signal `\ControlUnit.\src1' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
No latch inferred for signal `\ControlUnit.\src2' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
No latch inferred for signal `\ControlUnit.\dest' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
No latch inferred for signal `\ControlUnit.\reg_write' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
No latch inferred for signal `\ControlUnit.\alu_src_imm' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
No latch inferred for signal `\ControlUnit.\jump' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
No latch inferred for signal `\ControlUnit.\halt' from process `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.

19. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ProgramCounter.\pc' using process `\ProgramCounter.$proc$/openlane/designs/riscv32/ProgramCounter.v:8$35'.
  created $adff cell `$procdff$69' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_ADDR' using process `\RegisterFile.$proc$/openlane/designs/riscv32/Register.v:14$18'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_DATA' using process `\RegisterFile.$proc$/openlane/designs/riscv32/Register.v:14$18'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN' using process `\RegisterFile.$proc$/openlane/designs/riscv32/Register.v:14$18'.
  created $dff cell `$procdff$72' with positive edge clock.

20. Executing PROC_MEMWR pass (convert process memory writes to cells).

21. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ProgramCounter.$proc$/openlane/designs/riscv32/ProgramCounter.v:8$35'.
Removing empty process `ProgramCounter.$proc$/openlane/designs/riscv32/ProgramCounter.v:8$35'.
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/riscv32/alu.v:8$31'.
Removing empty process `ALU.$proc$/openlane/designs/riscv32/alu.v:8$31'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/riscv32/Register.v:14$18'.
Removing empty process `RegisterFile.$proc$/openlane/designs/riscv32/Register.v:14$18'.
Removing empty process `InstructionMemory.$proc$/openlane/designs/riscv32/InstructionMemory.v:0$12'.
Found and cleaned up 1 empty switch in `\ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
Removing empty process `ControlUnit.$proc$/openlane/designs/riscv32/ControlUnit.v:15$1'.
Cleaned up 4 empty switches.

22. Executing CHECK pass (checking for obvious problems).
Checking module ProgramCounter...
Checking module ALU...
Checking module RegisterFile...
Checking module InstructionMemory...
Checking module riscv32...
Checking module ControlUnit...
Found and reported 0 problems.

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module ProgramCounter.
Optimizing module ALU.
<suppressed ~2 debug messages>
Optimizing module RegisterFile.
Optimizing module InstructionMemory.
Optimizing module riscv32.
Optimizing module ControlUnit.
<suppressed ~2 debug messages>

24. Executing FLATTEN pass (flatten design).
Deleting now unused module ProgramCounter.
Deleting now unused module ALU.
Deleting now unused module RegisterFile.
Deleting now unused module InstructionMemory.
Deleting now unused module ControlUnit.
<suppressed ~5 debug messages>

25. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.
<suppressed ~1 debug messages>

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 4 unused cells and 50 unused wires.
<suppressed ~7 debug messages>

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
    New ctrl vector for $pmux cell $flatten\CU.$procmux$62: $auto$opt_reduce.cc:134:opt_pmux$75
    Consolidated identical input bits for $mux cell $flatten\RF.$procmux$46:
      Old ports: A=4'0000, B=4'1111, Y=$flatten\RF.$0$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN[3:0]$21
      New ports: A=1'0, B=1'1, Y=$flatten\RF.$0$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN[3:0]$21 [0]
      New connections: $flatten\RF.$0$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN[3:0]$21 [3:1] = { $flatten\RF.$0$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN[3:0]$21 [0] $flatten\RF.$0$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN[3:0]$21 [0] $flatten\RF.$0$memwr$\regs$/openlane/designs/riscv32/Register.v:16$17_EN[3:0]$21 [0] }
  Optimizing cells in module \riscv32.
Performed a total of 2 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing FSM pass (extract and optimize FSM).

28.1. Executing FSM_DETECT pass (finding FSMs in design).

28.2. Executing FSM_EXTRACT pass (extracting FSM from design).

28.3. Executing FSM_OPT pass (simple optimizations of FSMs).

28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

28.5. Executing FSM_OPT pass (simple optimizations of FSMs).

28.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

28.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

28.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

29.9. Finished OPT passes. (There is nothing left to do.)

30. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port riscv32.$flatten\IM.$meminit$\memory$/openlane/designs/riscv32/InstructionMemory.v:10$11 (IM.memory).
Removed top 28 address bits (of 32) from memory init port riscv32.$flatten\IM.$meminit$\memory$/openlane/designs/riscv32/InstructionMemory.v:7$8 (IM.memory).
Removed top 28 address bits (of 32) from memory init port riscv32.$flatten\IM.$meminit$\memory$/openlane/designs/riscv32/InstructionMemory.v:8$9 (IM.memory).
Removed top 28 address bits (of 32) from memory init port riscv32.$flatten\IM.$meminit$\memory$/openlane/designs/riscv32/InstructionMemory.v:9$10 (IM.memory).
Removed top 30 address bits (of 32) from memory read port riscv32.$flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:22$27 (RF.regs).
Removed top 30 address bits (of 32) from memory read port riscv32.$flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:23$28 (RF.regs).
Removed top 30 address bits (of 32) from memory read port riscv32.$flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:24$29 (RF.regs).
Removed top 30 address bits (of 32) from memory read port riscv32.$flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:25$30 (RF.regs).
Removed top 31 bits (of 32) from port B of cell riscv32.$flatten\PC.$add$/openlane/designs/riscv32/ProgramCounter.v:14$36 ($add).
Removed top 28 bits (of 32) from port Y of cell riscv32.$flatten\PC.$add$/openlane/designs/riscv32/ProgramCounter.v:14$36 ($add).
Removed top 2 bits (of 3) from port B of cell riscv32.$flatten\ALU1.$procmux$43_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell riscv32.$flatten\ALU1.$procmux$42_CMP0 ($eq).

31. Executing PEEPOPT pass (run peephole optimizers).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

33. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module riscv32:
  creating $macc model for $flatten\ALU1.$add$/openlane/designs/riscv32/alu.v:11$32 ($add).
  creating $macc model for $flatten\ALU1.$sub$/openlane/designs/riscv32/alu.v:12$33 ($sub).
  creating $macc model for $flatten\PC.$add$/openlane/designs/riscv32/ProgramCounter.v:14$36 ($add).
  creating $alu model for $macc $flatten\PC.$add$/openlane/designs/riscv32/ProgramCounter.v:14$36.
  creating $alu model for $macc $flatten\ALU1.$sub$/openlane/designs/riscv32/alu.v:12$33.
  creating $alu model for $macc $flatten\ALU1.$add$/openlane/designs/riscv32/alu.v:11$32.
  creating $alu cell for $flatten\ALU1.$add$/openlane/designs/riscv32/alu.v:11$32: $auto$alumacc.cc:485:replace_alu$76
  creating $alu cell for $flatten\ALU1.$sub$/openlane/designs/riscv32/alu.v:12$33: $auto$alumacc.cc:485:replace_alu$79
  creating $alu cell for $flatten\PC.$add$/openlane/designs/riscv32/ProgramCounter.v:14$36: $auto$alumacc.cc:485:replace_alu$82
  created 3 $alu and 0 $macc cells.

34. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module riscv32 that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:20$26 ($memrd):
    Found 3 activation_patterns using ctrl signal { $flatten\ALU1.$procmux$44_CMP $flatten\ALU1.$procmux$43_CMP $flatten\ALU1.$procmux$42_CMP \CU.reg_write \alu_src_imm }.
    Found 1 candidates: $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:19$25
    Analyzing resource sharing with $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:19$25 ($memrd):
      Found 2 activation_patterns using ctrl signal { $flatten\ALU1.$procmux$43_CMP $flatten\ALU1.$procmux$42_CMP \CU.reg_write }.
      Activation pattern for cell $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:20$26: { $flatten\ALU1.$procmux$42_CMP \CU.reg_write \alu_src_imm } = 3'110
      Activation pattern for cell $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:20$26: { $flatten\ALU1.$procmux$43_CMP \CU.reg_write \alu_src_imm } = 3'110
      Activation pattern for cell $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:20$26: { $flatten\ALU1.$procmux$44_CMP \CU.reg_write \alu_src_imm } = 3'110
      Activation pattern for cell $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:19$25: { $flatten\ALU1.$procmux$43_CMP \CU.reg_write } = 2'11
      Activation pattern for cell $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:19$25: { $flatten\ALU1.$procmux$42_CMP \CU.reg_write } = 2'11
      Size of SAT problem: 0 cells, 74 variables, 211 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $flatten\ALU1.$procmux$44_CMP $flatten\ALU1.$procmux$43_CMP $flatten\ALU1.$procmux$42_CMP \CU.reg_write \alu_src_imm } = 5'01010
  Analyzing resource sharing options for $flatten\RF.$memrd$\regs$/openlane/designs/riscv32/Register.v:19$25 ($memrd):
    Found 2 activation_patterns using ctrl signal { $flatten\ALU1.$procmux$43_CMP $flatten\ALU1.$procmux$42_CMP \CU.reg_write }.
    No candidates found.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

35.9. Finished OPT passes. (There is nothing left to do.)

36. Executing MEMORY pass.

36.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

36.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

36.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing riscv32.RF.regs write port 0.

36.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

36.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\IM.memory'[0] in module `\riscv32': no output FF found.
Checking read port `\RF.regs'[0] in module `\riscv32': no output FF found.
Checking read port `\RF.regs'[1] in module `\riscv32': no output FF found.
Checking read port `\RF.regs'[2] in module `\riscv32': no output FF found.
Checking read port `\RF.regs'[3] in module `\riscv32': no output FF found.
Checking read port `\RF.regs'[4] in module `\riscv32': no output FF found.
Checking read port `\RF.regs'[5] in module `\riscv32': no output FF found.
Checking read port address `\IM.memory'[0] in module `\riscv32': address FF has async set and/or reset, not supported.
Checking read port address `\RF.regs'[0] in module `\riscv32': no address FF found.
Checking read port address `\RF.regs'[1] in module `\riscv32': no address FF found.
Checking read port address `\RF.regs'[2] in module `\riscv32': no address FF found.
Checking read port address `\RF.regs'[3] in module `\riscv32': no address FF found.
Checking read port address `\RF.regs'[4] in module `\riscv32': no address FF found.
Checking read port address `\RF.regs'[5] in module `\riscv32': no address FF found.

36.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

36.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory riscv32.RF.regs by address:
  Merging ports 0, 1 (address 2'11).
  Merging ports 0, 2 (address 2'10).
Consolidating read ports of memory riscv32.RF.regs by address:

36.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

36.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

36.10. Executing MEMORY_COLLECT pass (generating $mem cells).

37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.
<suppressed ~6 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

38.5. Finished fast OPT passes.

39. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \IM.memory in module \riscv32:
  created 16 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \RF.regs in module \riscv32:
  created 4 $dff cells and 0 static cells of width 4.
  read interface: 0 $dff and 9 $mux cells.
  write interface: 4 write mux blocks.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.
<suppressed ~17 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
    Consolidated identical input bits for $mux cell $memory\IM.memory$rdmux[0][3][1]$125:
      Old ports: A=8'00101000, B=8'11100000, Y=$memory\IM.memory$rdmux[0][2][0]$b$112
      New ports: A=2'01, B=2'10, Y={ $memory\IM.memory$rdmux[0][2][0]$b$112 [6] $memory\IM.memory$rdmux[0][2][0]$b$112 [3] }
      New connections: { $memory\IM.memory$rdmux[0][2][0]$b$112 [7] $memory\IM.memory$rdmux[0][2][0]$b$112 [5:4] $memory\IM.memory$rdmux[0][2][0]$b$112 [2:0] } = { $memory\IM.memory$rdmux[0][2][0]$b$112 [6] 5'10000 }
    Consolidated identical input bits for $mux cell $memory\IM.memory$rdmux[0][3][0]$122:
      Old ports: A=8'00000011, B=8'00010101, Y=$memory\IM.memory$rdmux[0][2][0]$a$111
      New ports: A=2'01, B=2'10, Y=$memory\IM.memory$rdmux[0][2][0]$a$111 [2:1]
      New connections: { $memory\IM.memory$rdmux[0][2][0]$a$111 [7:3] $memory\IM.memory$rdmux[0][2][0]$a$111 [0] } = { 3'000 $memory\IM.memory$rdmux[0][2][0]$a$111 [2] 2'01 }
  Optimizing cells in module \riscv32.
    Consolidated identical input bits for $mux cell $memory\IM.memory$rdmux[0][2][0]$110:
      Old ports: A=$memory\IM.memory$rdmux[0][2][0]$a$111, B=$memory\IM.memory$rdmux[0][2][0]$b$112, Y=$memory\IM.memory$rdmux[0][1][0]$a$105
      New ports: A={ 3'000 $memory\IM.memory$rdmux[0][2][0]$a$111 [2:1] 1'1 }, B={ $memory\IM.memory$rdmux[0][2][0]$b$112 [6] 1'1 $memory\IM.memory$rdmux[0][2][0]$b$112 [3] 3'000 }, Y={ $memory\IM.memory$rdmux[0][1][0]$a$105 [6:5] $memory\IM.memory$rdmux[0][1][0]$a$105 [3:0] }
      New connections: { $memory\IM.memory$rdmux[0][1][0]$a$105 [7] $memory\IM.memory$rdmux[0][1][0]$a$105 [4] } = { $memory\IM.memory$rdmux[0][1][0]$a$105 [6] $memory\IM.memory$rdmux[0][1][0]$a$105 [2] }
  Optimizing cells in module \riscv32.
    Consolidated identical input bits for $mux cell $memory\IM.memory$rdmux[0][1][0]$104:
      Old ports: A=$memory\IM.memory$rdmux[0][1][0]$a$105, B=8'x, Y=$memory\IM.memory$rdmux[0][0][0]$a$102
      New ports: A={ $memory\IM.memory$rdmux[0][1][0]$a$105 [6:5] $memory\IM.memory$rdmux[0][1][0]$a$105 [3:0] }, B=6'x, Y={ $memory\IM.memory$rdmux[0][0][0]$a$102 [6:5] $memory\IM.memory$rdmux[0][0][0]$a$102 [3:0] }
      New connections: { $memory\IM.memory$rdmux[0][0][0]$a$102 [7] $memory\IM.memory$rdmux[0][0][0]$a$102 [4] } = { $memory\IM.memory$rdmux[0][0][0]$a$102 [6] $memory\IM.memory$rdmux[0][0][0]$a$102 [2] }
  Optimizing cells in module \riscv32.
    Consolidated identical input bits for $mux cell $memory\IM.memory$rdmux[0][0][0]$101:
      Old ports: A=$memory\IM.memory$rdmux[0][0][0]$a$102, B=8'x, Y={ \CU.instr [7:5] \instr [4:0] }
      New ports: A={ $memory\IM.memory$rdmux[0][0][0]$a$102 [6:5] $memory\IM.memory$rdmux[0][0][0]$a$102 [3:0] }, B=6'x, Y={ \CU.instr [6:5] \instr [3:0] }
      New connections: { \CU.instr [7] \instr [4] } = { \CU.instr [6] \instr [2] }
  Optimizing cells in module \riscv32.
Performed a total of 5 changes.

40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

40.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\ALU1.$procmux$41 in front of them:
        $auto$alumacc.cc:485:replace_alu$79
        $auto$alumacc.cc:485:replace_alu$76

40.7. Executing OPT_DFF pass (perform DFF optimizations).

40.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 54 unused wires.
<suppressed ~1 debug messages>

40.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.
<suppressed ~8 debug messages>

40.10. Rerunning OPT passes. (Maybe there is more to do..)

40.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/4 on $pmux $flatten\ALU1.$procmux$41.
Removed 1 multiplexer ports.
<suppressed ~8 debug messages>

40.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
Performed a total of 0 changes.

40.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

40.14. Executing OPT_SHARE pass.

40.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\RF.regs[3]$152 ($dff) from module riscv32 (D = \RF.wdata, Q = \RF.regs[3]).
Adding EN signal on $memory\RF.regs[2]$150 ($dff) from module riscv32 (D = \RF.wdata, Q = \RF.regs[2]).
Adding EN signal on $memory\RF.regs[1]$148 ($dff) from module riscv32 (D = \RF.wdata, Q = \RF.regs[1]).
Adding EN signal on $memory\RF.regs[0]$146 ($dff) from module riscv32 (D = \RF.wdata, Q = \RF.regs[0]).

40.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 4 unused cells and 8 unused wires.
<suppressed ~5 debug messages>

40.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

40.18. Rerunning OPT passes. (Maybe there is more to do..)

40.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

40.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
Performed a total of 0 changes.

40.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

40.22. Executing OPT_SHARE pass.

40.23. Executing OPT_DFF pass (perform DFF optimizations).

40.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

40.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

40.26. Finished OPT passes. (There is nothing left to do.)

41. Executing TECHMAP pass (map to technology primitives).

41.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

41.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $adff.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$6b90a16b6f3b57b9c9d958838204f952a01dc262\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~365 debug messages>

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.
<suppressed ~68 debug messages>

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 12 unused cells and 126 unused wires.
<suppressed ~13 debug messages>

42.5. Finished fast OPT passes.

43. Executing ABC pass (technology mapping using ABC).

43.1. Extracting gate netlist of module `\riscv32' to `<abc-temp-dir>/input.blif'..
Extracted 102 gates and 123 wires to a netlist network with 20 inputs and 18 outputs.

43.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

43.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       15
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               MUX cells:       16
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               NOR cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               AND cells:        6
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:       85
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       18
Removing temp directory.

44. Executing OPT pass (performing simple optimizations).

44.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.
<suppressed ~2 debug messages>

44.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

44.3. Executing OPT_DFF pass (perform DFF optimizations).

44.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 82 unused wires.
<suppressed ~13 debug messages>

44.5. Finished fast OPT passes.

45. Executing HIERARCHY pass (managing design hierarchy).

45.1. Analyzing design hierarchy..
Top module:  \riscv32

45.2. Analyzing design hierarchy..
Top module:  \riscv32
Removed 0 unused modules.

46. Printing statistics.

=== riscv32 ===

   Number of wires:                115
   Number of wire bits:            214
   Number of public wires:          44
   Number of public wire bits:     137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     $_ANDNOT_                      20
     $_AND_                          5
     $_DFFE_PP_                     16
     $_DFF_PP0_                      4
     $_MUX_                         16
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                         15
     $_ORNOT_                        3
     $_OR_                           7
     $_XNOR_                         2
     $_XOR_                         10

47. Executing CHECK pass (checking for obvious problems).
Checking module riscv32...
Found and reported 0 problems.

48. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/riscv32/runs/RUN_2025.07.31_16.31.55/tmp/synthesis/post_techmap.dot'.
Dumping module riscv32 to page 1.

49. Executing SHARE pass (SAT-based resource sharing).

50. Executing OPT pass (performing simple optimizations).

50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \riscv32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \riscv32.
Performed a total of 0 changes.

50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\riscv32'.
Removed a total of 0 cells.

50.6. Executing OPT_DFF pass (perform DFF optimizations).

50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..

50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module riscv32.

50.9. Finished OPT passes. (There is nothing left to do.)

51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 34 unused wires.
<suppressed ~34 debug messages>

52. Printing statistics.

=== riscv32 ===

   Number of wires:                 81
   Number of wire bits:            112
   Number of public wires:          10
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     $_ANDNOT_                      20
     $_AND_                          5
     $_DFFE_PP_                     16
     $_DFF_PP0_                      4
     $_MUX_                         16
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                         15
     $_ORNOT_                        3
     $_OR_                           7
     $_XNOR_                         2
     $_XOR_                         10

mapping tbuf

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /home/mukul/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/mukul/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing TECHMAP pass (map to technology primitives).

55.1. Executing Verilog-2005 frontend: /home/mukul/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/mukul/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

55.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

56. Executing SIMPLEMAP pass (map simple cells to gate primitives).

57. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

57.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\riscv32':
  mapped 4 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 16 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

58. Printing statistics.

=== riscv32 ===

   Number of wires:                101
   Number of wire bits:            132
   Number of public wires:          10
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                122
     $_ANDNOT_                      20
     $_AND_                          5
     $_MUX_                         32
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                         19
     $_ORNOT_                        3
     $_OR_                           7
     $_XNOR_                         2
     $_XOR_                         10
     sky130_fd_sc_hd__dfrtp_2        4
     sky130_fd_sc_hd__dfxtp_2       16

[INFO]: USING STRATEGY AREA 0

59. Executing ABC pass (technology mapping using ABC).

59.1. Extracting gate netlist of module `\riscv32' to `/tmp/yosys-abc-78NrRl/input.blif'..
Extracted 102 gates and 123 wires to a netlist network with 21 inputs and 29 outputs.

59.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-78NrRl/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-78NrRl/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-78NrRl/input.blif 
ABC: + read_lib -w /openlane/designs/riscv32/runs/RUN_2025.07.31_16.31.55/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/riscv32/runs/RUN_2025.07.31_16.31.55/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.08 sec
ABC: Memory =    9.54 MB. Time =     0.08 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/riscv32/runs/RUN_2025.07.31_16.31.55/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/riscv32/runs/RUN_2025.07.31_16.31.55/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 25000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 25000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 25000 
ABC: Current delay (1789.42 ps) does not exceed the target delay (25000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 25000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     77 ( 33.8 %)   Cap = 14.6 ff (  7.6 %)   Area =      543.02 ( 64.9 %)   Delay =  1913.43 ps  ( 11.7 %)               
ABC: Path  0 --       2 : 0   10 pi                        A =   0.00  Df =  69.1  -37.3 ps  S = 102.6 ps  Cin =  0.0 ff  Cout =  21.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      58 : 2    2 sky130_fd_sc_hd__or2b_2   A =   8.76  Df = 370.2 -182.4 ps  S =  54.8 ps  Cin =  1.6 ff  Cout =   3.8 ff  Cmax = 312.2 ff  G =  231  
ABC: Path  2 --      59 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 562.1  -90.7 ps  S = 345.7 ps  Cin =  2.1 ff  Cout =  29.0 ff  Cmax = 130.0 ff  G = 1308  
ABC: Path  3 --     111 : 4    1 sky130_fd_sc_hd__a2bb2o_2 A =  11.26  Df =1913.4  -25.3 ps  S = 182.0 ps  Cin =  1.7 ff  Cout =  33.4 ff  Cmax = 300.3 ff  G = 1942  
ABC: Start-point = pi1 (\instr [5]).  End-point = po20 ($auto$rtlil.cc:2607:MuxGate$676).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   21/   29  lat =    0  nd =    77  edge =    164  area =543.05  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-78NrRl/output.blif 

59.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       17
ABC RESULTS:        internal signals:       73
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       29
Removing temp directory.

60. Executing SETUNDEF pass (replace undef values with defined constants).

61. Executing HILOMAP pass (mapping to constant drivers).

62. Executing SPLITNETS pass (splitting up multi-bit signals).

63. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \riscv32..
Removed 0 unused cells and 127 unused wires.
<suppressed ~5 debug messages>

64. Executing INSBUF pass (insert buffer cells for connected wires).
Add riscv32/$auto$insbuf.cc:97:execute$771: \instr [4] -> \instr [2]
Add riscv32/$auto$insbuf.cc:97:execute$772: \halt -> \instr [6]
Add riscv32/$auto$insbuf.cc:97:execute$773: \halt -> \instr [7]
Add riscv32/$auto$insbuf.cc:97:execute$774: \instr [5] -> \pc [1]

65. Executing CHECK pass (checking for obvious problems).
Checking module riscv32...
Warning: Wire riscv32.\pc [3] is used but has no driver.
Warning: Wire riscv32.\pc [2] is used but has no driver.
Warning: Wire riscv32.\pc [1] is used but has no driver.
Warning: Wire riscv32.\pc [0] is used but has no driver.
Warning: Wire riscv32.\instr [7] is used but has no driver.
Warning: Wire riscv32.\instr [6] is used but has no driver.
Warning: Wire riscv32.\instr [5] is used but has no driver.
Warning: Wire riscv32.\instr [4] is used but has no driver.
Warning: Wire riscv32.\instr [3] is used but has no driver.
Warning: Wire riscv32.\instr [2] is used but has no driver.
Warning: Wire riscv32.\instr [1] is used but has no driver.
Warning: Wire riscv32.\instr [0] is used but has no driver.
Warning: Wire riscv32.\halt is used but has no driver.
Warning: Wire riscv32.\R3 [3] is used but has no driver.
Warning: Wire riscv32.\R3 [2] is used but has no driver.
Warning: Wire riscv32.\R3 [1] is used but has no driver.
Warning: Wire riscv32.\R3 [0] is used but has no driver.
Warning: Wire riscv32.\R2 [3] is used but has no driver.
Warning: Wire riscv32.\R2 [2] is used but has no driver.
Warning: Wire riscv32.\R2 [1] is used but has no driver.
Warning: Wire riscv32.\R2 [0] is used but has no driver.
Warning: Wire riscv32.\R1 [3] is used but has no driver.
Warning: Wire riscv32.\R1 [2] is used but has no driver.
Warning: Wire riscv32.\R1 [1] is used but has no driver.
Warning: Wire riscv32.\R1 [0] is used but has no driver.
Warning: Wire riscv32.\R0 [3] is used but has no driver.
Warning: Wire riscv32.\R0 [2] is used but has no driver.
Warning: Wire riscv32.\R0 [1] is used but has no driver.
Warning: Wire riscv32.\R0 [0] is used but has no driver.
Found and reported 29 problems.

66. Printing statistics.

=== riscv32 ===

   Number of wires:                 81
   Number of wire bits:            103
   Number of public wires:           9
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21o_2         1
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__and2_2         5
     sky130_fd_sc_hd__and3_2         3
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__buf_1         17
     sky130_fd_sc_hd__buf_2          4
     sky130_fd_sc_hd__dfrtp_2        4
     sky130_fd_sc_hd__dfxtp_2       16
     sky130_fd_sc_hd__inv_2          9
     sky130_fd_sc_hd__mux2_2         1
     sky130_fd_sc_hd__nand2_2        6
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nor2_2         4
     sky130_fd_sc_hd__o221a_2        2
     sky130_fd_sc_hd__or2_2          8
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__or3b_2         3
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         3

   Chip area for module '\riscv32': 1008.467200

67. Executing Verilog backend.
Dumping module `\riscv32'.

Warnings: 29 unique messages, 29 total
End of script. Logfile hash: b7985ac855, CPU: user 0.37s system 0.04s, MEM: 28.88 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 48% 2x abc (0 sec), 14% 4x stat (0 sec), ...
